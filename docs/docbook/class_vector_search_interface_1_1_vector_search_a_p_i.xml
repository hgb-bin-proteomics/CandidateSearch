<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_vector_search_interface_1_1_vector_search_a_p_i" xml:lang="en-US">
<title>VectorSearchInterface.VectorSearchAPI Class Reference</title>
<indexterm><primary>VectorSearchInterface.VectorSearchAPI</primary></indexterm>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static int[] <link linkend="_class_vector_search_interface_1_1_vector_search_a_p_i_1a590ce87e625ca1e73c5cd4dfdc4c5a19">searchCPU</link> (ref int[] candidatesValues, ref int[] candidatesIdx, ref int[] spectraValues, ref int[] spectraIdx, int topN, float tolerance, bool normalize, bool useGaussianTol, bool batched, int batchSize, bool useSparse, int cores, int verbose, out int memStat)</para>

<para>Calculates the top n candidates for each spectrum on the CPU using Eigen. </para>
</listitem>
            <listitem><para>static int[] <link linkend="_class_vector_search_interface_1_1_vector_search_a_p_i_1a0f85ff8875e0abb9b00dd5ca4d170aaf">searchGPU</link> (ref int[] csrRowoffsets, ref int[] csrColIdx, ref int[] spectraValues, ref int[] spectraIdx, int topN, float tolerance, bool normalize, bool useGaussianTol, bool batched, int batchSize, bool useSparse, int verbose, out int memStat)</para>

<para>Calculates the top n candidates for each spectrum on the (Nvidia) GPU using CUDA. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="__vector_search_a_p_i_8cs_source_1l00005">5</link> of file <link linkend="__vector_search_a_p_i_8cs_source">VectorSearchAPI.cs</link>.</para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_vector_search_interface_1_1_vector_search_a_p_i_1a590ce87e625ca1e73c5cd4dfdc4c5a19"/><section>
    <title>searchCPU()</title>
<indexterm><primary>searchCPU</primary><secondary>VectorSearchInterface.VectorSearchAPI</secondary></indexterm>
<indexterm><primary>VectorSearchInterface.VectorSearchAPI</primary><secondary>searchCPU</secondary></indexterm>
<para><computeroutput>static int[] VectorSearchInterface.VectorSearchAPI.searchCPU (ref int[] candidatesValues, ref int[] candidatesIdx, ref int[] spectraValues, ref int[] spectraIdx, int topN, float tolerance, bool normalize, bool useGaussianTol, bool batched, int batchSize, bool useSparse, int cores, int verbose, out int memStat)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Calculates the top n candidates for each spectrum on the CPU using Eigen. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>candidatesValues</entry><entry>
<para>An integer array of theoretical ion m/z values for all candidates flattened.</para>
</entry>
                            </row>
                            <row>
<entry>candidatesIdx</entry><entry>
<para>An integer array that contains indices indicating where each candidate starts in candidatesValues.</para>
</entry>
                            </row>
                            <row>
<entry>spectraValues</entry><entry>
<para>An integer array of peak m/z values from experimental spectra flattened.</para>
</entry>
                            </row>
                            <row>
<entry>spectraIdx</entry><entry>
<para>An integer array that contains indices indicating where each spectrum starts in spectraValues.</para>
</entry>
                            </row>
                            <row>
<entry>topN</entry><entry>
<para>The number (int) of top candidates that should be returned for each spectrum.</para>
</entry>
                            </row>
                            <row>
<entry>tolerance</entry><entry>
<para>Tolerance used for matching peaks in Dalton (float).</para>
</entry>
                            </row>
                            <row>
<entry>normalize</entry><entry>
<para>Whether or not the candidate scores should be normalized by candidate length (bool).</para>
</entry>
                            </row>
                            <row>
<entry>useGaussianTol</entry><entry>
<para>Whether or not experimental peaks should be modelled as gaussian normal distributions (bool).</para>
</entry>
                            </row>
                            <row>
<entry>batched</entry><entry>
<para>Whether a batched approach (MM) or not (MV) should be used (bool).</para>
</entry>
                            </row>
                            <row>
<entry>batchSize</entry><entry>
<para>If a batched approach is used, how big should batches be (integer).</para>
</entry>
                            </row>
                            <row>
<entry>useSparse</entry><entry>
<para>Whether a sparse approach (SPMV/SPMM) or not (GEMV/GEMM) should be used (bool).</para>
</entry>
                            </row>
                            <row>
<entry>cores</entry><entry>
<para>The number of CPU cores that should be used for computation (int).</para>
</entry>
                            </row>
                            <row>
<entry>verbose</entry><entry>
<para>An integer parameter controlling how often progress should be printed to std::out. If 0 no progress will be printed.</para>
</entry>
                            </row>
                            <row>
<entry>memStat</entry><entry>
<para>An integer out parameter indicating if memory was successfully freed after execution, 0 = success, 1 = error.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An integer array with length (number of spectra * topN) containing the indices of the top n candidates for every spectrum.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__vector_search_a_p_i_8cs_source_1l00097">97</link> of file <link linkend="__vector_search_a_p_i_8cs_source">VectorSearchAPI.cs</link>.</para>
</section>
<anchor xml:id="_class_vector_search_interface_1_1_vector_search_a_p_i_1a0f85ff8875e0abb9b00dd5ca4d170aaf"/><section>
    <title>searchGPU()</title>
<indexterm><primary>searchGPU</primary><secondary>VectorSearchInterface.VectorSearchAPI</secondary></indexterm>
<indexterm><primary>VectorSearchInterface.VectorSearchAPI</primary><secondary>searchGPU</secondary></indexterm>
<para><computeroutput>static int[] VectorSearchInterface.VectorSearchAPI.searchGPU (ref int[] csrRowoffsets, ref int[] csrColIdx, ref int[] spectraValues, ref int[] spectraIdx, int topN, float tolerance, bool normalize, bool useGaussianTol, bool batched, int batchSize, bool useSparse, int verbose, out int memStat)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Calculates the top n candidates for each spectrum on the (Nvidia) GPU using CUDA. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>csrRowoffsets</entry><entry>
<para>An integer array of rowoffsets of the CSR sparse matrix with length (rows + 1 = number of candidates + 1).</para>
</entry>
                            </row>
                            <row>
<entry>csrColIdx</entry><entry>
<para>An integer array of column indices of the CSR sparse matrix with length (NNZ = total number of theoretical ions).</para>
</entry>
                            </row>
                            <row>
<entry>spectraValues</entry><entry>
<para>An integer array of peak m/z values from experimental spectra flattened.</para>
</entry>
                            </row>
                            <row>
<entry>spectraIdx</entry><entry>
<para>An integer array that contains indices indicating where each spectrum starts in spectraValues.</para>
</entry>
                            </row>
                            <row>
<entry>topN</entry><entry>
<para>The number (int) of top candidates that should be returned for each spectrum.</para>
</entry>
                            </row>
                            <row>
<entry>tolerance</entry><entry>
<para>Tolerance used for matching peaks in Dalton (float).</para>
</entry>
                            </row>
                            <row>
<entry>normalize</entry><entry>
<para>Whether or not the candidate scores should be normalized by candidate length (bool).</para>
</entry>
                            </row>
                            <row>
<entry>useGaussianTol</entry><entry>
<para>Whether or not experimental peaks should be modelled as gaussian normal distributions (bool).</para>
</entry>
                            </row>
                            <row>
<entry>batched</entry><entry>
<para>Whether a batched approach (MM) or not (MV) should be used (bool).</para>
</entry>
                            </row>
                            <row>
<entry>batchSize</entry><entry>
<para>If a batched approach is used, how big should batches be (integer).</para>
</entry>
                            </row>
                            <row>
<entry>useSparse</entry><entry>
<para>Whether a sparse approach (SPMV/SPMM) or not (GEMV/GEMM) should be used (bool).</para>
</entry>
                            </row>
                            <row>
<entry>verbose</entry><entry>
<para>An integer parameter controlling how often progress should be printed to std::out. If 0 no progress will be printed.</para>
</entry>
                            </row>
                            <row>
<entry>memStat</entry><entry>
<para>An integer out parameter indicating if memory was successfully freed after execution, 0 = success, 1 = error.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An integer array with length (number of spectra * topN) containing the indices of the top n candidates for every spectrum.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__vector_search_a_p_i_8cs_source_1l00210">210</link> of file <link linkend="__vector_search_a_p_i_8cs_source">VectorSearchAPI.cs</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
dll/VectorSearchAPI.cs</section>
</section>
