<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__vector_search_a_p_i_8cs_source" xml:lang="en-US">
<title>VectorSearchAPI.cs</title>
<indexterm><primary>dll/VectorSearchAPI.cs</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__vector_search_a_p_i_8cs_source_1l00001"/>00001 <emphasis role="keyword">using&#32;</emphasis>System.Runtime.InteropServices;
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00002"/>00002 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00003"/><link linkend="_namespace_vector_search_interface">00003</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_vector_search_interface">VectorSearchInterface</link>
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00004"/>00004 {
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00005"/><link linkend="_class_vector_search_interface_1_1_vector_search_a_p_i">00005</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_vector_search_interface_1_1_vector_search_a_p_i">VectorSearchAPI</link>
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00006"/>00006 &#32;&#32;&#32;&#32;{
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00007"/>00007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;dllCPU&#32;=&#32;<emphasis role="stringliteral">@&quot;VectorSearch.dll&quot;</emphasis>;
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00008"/>00008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;dllGPU&#32;=&#32;<emphasis role="stringliteral">@&quot;VectorSearchCUDA.dll&quot;</emphasis>;
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00009"/>00009 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00010"/>00010 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;VectorSearch.dll_import</emphasis>
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00011"/>00011 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[DllImport(dllCPU,&#32;CallingConvention&#32;=&#32;CallingConvention.Cdecl)]
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">extern</emphasis>&#32;IntPtr&#32;findTopCandidates(IntPtr&#32;cV,&#32;IntPtr&#32;cI,&#32;IntPtr&#32;sV,&#32;IntPtr&#32;sI,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cVL,&#32;<emphasis role="keywordtype">int</emphasis>&#32;cIL,&#32;<emphasis role="keywordtype">int</emphasis>&#32;sVL,&#32;<emphasis role="keywordtype">int</emphasis>&#32;sIL,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;<emphasis role="keywordtype">float</emphasis>&#32;tolerance,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;normalize,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;gaussianTol,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cores,&#32;<emphasis role="keywordtype">int</emphasis>&#32;verbose);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00018"/>00018 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[DllImport(dllCPU,&#32;CallingConvention&#32;=&#32;CallingConvention.Cdecl)]
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">extern</emphasis>&#32;IntPtr&#32;findTopCandidatesBatched(IntPtr&#32;cV,&#32;IntPtr&#32;cI,&#32;IntPtr&#32;sV,&#32;IntPtr&#32;sI,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cVL,&#32;<emphasis role="keywordtype">int</emphasis>&#32;cIL,&#32;<emphasis role="keywordtype">int</emphasis>&#32;sVL,&#32;<emphasis role="keywordtype">int</emphasis>&#32;sIL,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;<emphasis role="keywordtype">float</emphasis>&#32;tolerance,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;normalize,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;gaussianTol,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;batchSize,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cores,&#32;<emphasis role="keywordtype">int</emphasis>&#32;verbose);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00026"/>00026 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[DllImport(dllCPU,&#32;CallingConvention&#32;=&#32;CallingConvention.Cdecl)]
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">extern</emphasis>&#32;IntPtr&#32;findTopCandidates2(IntPtr&#32;cV,&#32;IntPtr&#32;cI,&#32;IntPtr&#32;sV,&#32;IntPtr&#32;sI,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cVL,&#32;<emphasis role="keywordtype">int</emphasis>&#32;cIL,&#32;<emphasis role="keywordtype">int</emphasis>&#32;sVL,&#32;<emphasis role="keywordtype">int</emphasis>&#32;sIL,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;<emphasis role="keywordtype">float</emphasis>&#32;tolerance,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;normalize,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;gaussianTol,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cores,&#32;<emphasis role="keywordtype">int</emphasis>&#32;verbose);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00033"/>00033 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[DllImport(dllCPU,&#32;CallingConvention&#32;=&#32;CallingConvention.Cdecl)]
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">extern</emphasis>&#32;IntPtr&#32;findTopCandidatesBatched2(IntPtr&#32;cV,&#32;IntPtr&#32;cI,&#32;IntPtr&#32;sV,&#32;IntPtr&#32;sI,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cVL,&#32;<emphasis role="keywordtype">int</emphasis>&#32;cIL,&#32;<emphasis role="keywordtype">int</emphasis>&#32;sVL,&#32;<emphasis role="keywordtype">int</emphasis>&#32;sIL,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;<emphasis role="keywordtype">float</emphasis>&#32;tolerance,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;normalize,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;gaussianTol,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;batchSize,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cores,&#32;<emphasis role="keywordtype">int</emphasis>&#32;verbose);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00041"/>00041 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[DllImport(dllCPU,&#32;CallingConvention&#32;=&#32;CallingConvention.Cdecl)]
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;releaseMemory(IntPtr&#32;result);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00044"/>00044 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00045"/>00045 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00046"/>00046 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00047"/>00047 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;VectorSearchCUDA.dll_import</emphasis>
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00048"/>00048 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[DllImport(dllGPU,&#32;CallingConvention&#32;=&#32;CallingConvention.Cdecl)]
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">extern</emphasis>&#32;IntPtr&#32;findTopCandidatesCuda(IntPtr&#32;cR,&#32;IntPtr&#32;cI,&#32;IntPtr&#32;sV,&#32;IntPtr&#32;sI,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cRL,&#32;<emphasis role="keywordtype">int</emphasis>&#32;cNNZ,&#32;<emphasis role="keywordtype">int</emphasis>&#32;sVL,&#32;<emphasis role="keywordtype">int</emphasis>&#32;sIL,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;<emphasis role="keywordtype">float</emphasis>&#32;tolerance,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;normalize,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;gaussianTol,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;verbose);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00055"/>00055 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[DllImport(dllGPU,&#32;CallingConvention&#32;=&#32;CallingConvention.Cdecl)]
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">extern</emphasis>&#32;IntPtr&#32;findTopCandidatesCudaBatched(IntPtr&#32;cR,&#32;IntPtr&#32;cI,&#32;IntPtr&#32;sV,&#32;IntPtr&#32;sI,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cRL,&#32;<emphasis role="keywordtype">int</emphasis>&#32;cNNZ,&#32;<emphasis role="keywordtype">int</emphasis>&#32;sVL,&#32;<emphasis role="keywordtype">int</emphasis>&#32;sIL,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;<emphasis role="keywordtype">float</emphasis>&#32;tolerance,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;normalize,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;gaussianTol,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;batchSize,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;verbose);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00063"/>00063 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[DllImport(dllGPU,&#32;CallingConvention&#32;=&#32;CallingConvention.Cdecl)]
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">extern</emphasis>&#32;IntPtr&#32;findTopCandidatesCudaBatched2(IntPtr&#32;cR,&#32;IntPtr&#32;cI,&#32;IntPtr&#32;sV,&#32;IntPtr&#32;sI,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cRL,&#32;<emphasis role="keywordtype">int</emphasis>&#32;cNNZ,&#32;<emphasis role="keywordtype">int</emphasis>&#32;sVL,&#32;<emphasis role="keywordtype">int</emphasis>&#32;sIL,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;<emphasis role="keywordtype">float</emphasis>&#32;tolerance,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;normalize,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;gaussianTol,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;batchSize,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;verbose);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00071"/>00071 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[DllImport(dllGPU,&#32;CallingConvention&#32;=&#32;CallingConvention.Cdecl)]
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;releaseMemoryCuda(IntPtr&#32;result);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00074"/>00074 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00075"/>00075 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00076"/>00076 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00077"/>00077 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;CPU_search</emphasis>
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00078"/>00078 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00097"/><link linkend="_class_vector_search_interface_1_1_vector_search_a_p_i_1a590ce87e625ca1e73c5cd4dfdc4c5a19">00097</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;<link linkend="_class_vector_search_interface_1_1_vector_search_a_p_i_1a590ce87e625ca1e73c5cd4dfdc4c5a19">searchCPU</link>(ref&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;candidatesValues,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;candidatesIdx,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;spectraValues,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;spectraIdx,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;topN,&#32;<emphasis role="keywordtype">float</emphasis>&#32;tolerance,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;normalize,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;useGaussianTol,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;batched,&#32;<emphasis role="keywordtype">int</emphasis>&#32;batchSize,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;useSparse,&#32;<emphasis role="keywordtype">int</emphasis>&#32;cores,&#32;<emphasis role="keywordtype">int</emphasis>&#32;verbose,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;<emphasis role="keywordtype">int</emphasis>&#32;memStat)
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;cValuesLoc&#32;=&#32;GCHandle.Alloc(candidatesValues,&#32;GCHandleType.Pinned);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;cIdxLoc&#32;=&#32;GCHandle.Alloc(candidatesIdx,&#32;GCHandleType.Pinned);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sValuesLoc&#32;=&#32;GCHandle.Alloc(spectraValues,&#32;GCHandleType.Pinned);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sIdxLoc&#32;=&#32;GCHandle.Alloc(spectraIdx,&#32;GCHandleType.Pinned);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00106"/>00106 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cVLength&#32;=&#32;candidatesValues.Length;
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cILength&#32;=&#32;candidatesIdx.Length;
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sVLength&#32;=&#32;spectraValues.Length;
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sILength&#32;=&#32;spectraIdx.Length;
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00111"/>00111 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resultArray&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>[sILength&#32;*&#32;topN];
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00113"/>00113 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memStat&#32;=&#32;1;
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00115"/>00115 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;cValuesPtr&#32;=&#32;cValuesLoc.AddrOfPinnedObject();
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;cIdxPtr&#32;=&#32;cIdxLoc.AddrOfPinnedObject();
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;sValuesPtr&#32;=&#32;sValuesLoc.AddrOfPinnedObject();
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;sIdxPtr&#32;=&#32;sIdxLoc.AddrOfPinnedObject();
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00122"/>00122 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!batched&#32;&amp;&amp;&#32;useSparse)
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;result&#32;=&#32;findTopCandidates(cValuesPtr,&#32;cIdxPtr,&#32;sValuesPtr,&#32;sIdxPtr,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cVLength,&#32;cILength,&#32;sVLength,&#32;sILength,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;topN,&#32;tolerance,&#32;normalize,&#32;useGaussianTol,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cores,&#32;verbose);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00129"/>00129 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Marshal.Copy(result,&#32;resultArray,&#32;0,&#32;sILength&#32;*&#32;topN);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00131"/>00131 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memStat&#32;=&#32;releaseMemory(result);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!batched&#32;&amp;&amp;&#32;!useSparse)
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;result&#32;=&#32;findTopCandidates2(cValuesPtr,&#32;cIdxPtr,&#32;sValuesPtr,&#32;sIdxPtr,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cVLength,&#32;cILength,&#32;sVLength,&#32;sILength,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;topN,&#32;tolerance,&#32;normalize,&#32;useGaussianTol,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cores,&#32;verbose);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00140"/>00140 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Marshal.Copy(result,&#32;resultArray,&#32;0,&#32;sILength&#32;*&#32;topN);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00142"/>00142 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memStat&#32;=&#32;releaseMemory(result);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(batched&#32;&amp;&amp;&#32;useSparse)
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;result&#32;=&#32;findTopCandidatesBatched(cValuesPtr,&#32;cIdxPtr,&#32;sValuesPtr,&#32;sIdxPtr,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cVLength,&#32;cILength,&#32;sVLength,&#32;sILength,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;topN,&#32;tolerance,&#32;normalize,&#32;useGaussianTol,&#32;batchSize,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cores,&#32;verbose);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00151"/>00151 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Marshal.Copy(result,&#32;resultArray,&#32;0,&#32;sILength&#32;*&#32;topN);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00153"/>00153 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memStat&#32;=&#32;releaseMemory(result);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(batched&#32;&amp;&amp;&#32;!useSparse)
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;result&#32;=&#32;findTopCandidatesBatched2(cValuesPtr,&#32;cIdxPtr,&#32;sValuesPtr,&#32;sIdxPtr,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cVLength,&#32;cILength,&#32;sVLength,&#32;sILength,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;topN,&#32;tolerance,&#32;normalize,&#32;useGaussianTol,&#32;batchSize,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cores,&#32;verbose);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00162"/>00162 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Marshal.Copy(result,&#32;resultArray,&#32;0,&#32;sILength&#32;*&#32;topN);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00164"/>00164 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memStat&#32;=&#32;releaseMemory(result);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine(<emphasis role="stringliteral">&quot;Impossible&#32;case!&quot;</emphasis>);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(Exception&#32;ex)
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine(<emphasis role="stringliteral">&quot;Something&#32;went&#32;wrong:&quot;</emphasis>);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine(ex.ToString());
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memStat&#32;=&#32;1;
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">finally</emphasis>
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cValuesLoc.IsAllocated)&#32;{&#32;cValuesLoc.Free();&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cIdxLoc.IsAllocated)&#32;{&#32;cIdxLoc.Free();&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sValuesLoc.IsAllocated)&#32;{&#32;sValuesLoc.Free();&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sIdxLoc.IsAllocated)&#32;{&#32;sIdxLoc.Free();&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00185"/>00185 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;resultArray;
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00188"/>00188 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00189"/>00189 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00190"/>00190 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00191"/>00191 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;GPU_search</emphasis>
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00192"/>00192 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00210"/><link linkend="_class_vector_search_interface_1_1_vector_search_a_p_i_1a0f85ff8875e0abb9b00dd5ca4d170aaf">00210</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;<link linkend="_class_vector_search_interface_1_1_vector_search_a_p_i_1a0f85ff8875e0abb9b00dd5ca4d170aaf">searchGPU</link>(ref&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;csrRowoffsets,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;csrColIdx,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;spectraValues,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;spectraIdx,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;topN,&#32;<emphasis role="keywordtype">float</emphasis>&#32;tolerance,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;normalize,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;useGaussianTol,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;batched,&#32;<emphasis role="keywordtype">int</emphasis>&#32;batchSize,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;useSparse,&#32;<emphasis role="keywordtype">int</emphasis>&#32;verbose,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;<emphasis role="keywordtype">int</emphasis>&#32;memStat)
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;csrRowoffsetsLoc&#32;=&#32;GCHandle.Alloc(csrRowoffsets,&#32;GCHandleType.Pinned);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;csrIdxLoc&#32;=&#32;GCHandle.Alloc(csrColIdx,&#32;GCHandleType.Pinned);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sValuesLoc&#32;=&#32;GCHandle.Alloc(spectraValues,&#32;GCHandleType.Pinned);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;sIdxLoc&#32;=&#32;GCHandle.Alloc(spectraIdx,&#32;GCHandleType.Pinned);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00219"/>00219 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cRLength&#32;=&#32;csrRowoffsets.Length;
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cILength&#32;=&#32;csrColIdx.Length;
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sVLength&#32;=&#32;spectraValues.Length;
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sILength&#32;=&#32;spectraIdx.Length;
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00224"/>00224 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;resultArray&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>[sILength&#32;*&#32;topN];
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00226"/>00226 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memStat&#32;=&#32;1;
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00228"/>00228 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;csrRowoffsetsPtr&#32;=&#32;csrRowoffsetsLoc.AddrOfPinnedObject();
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;csrIdxPtr&#32;=&#32;csrIdxLoc.AddrOfPinnedObject();
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;sValuesPtr&#32;=&#32;sValuesLoc.AddrOfPinnedObject();
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;sIdxPtr&#32;=&#32;sIdxLoc.AddrOfPinnedObject();
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00235"/>00235 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00236"/>00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!batched)
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;result&#32;=&#32;findTopCandidatesCuda(csrRowoffsetsPtr,&#32;csrIdxPtr,&#32;sValuesPtr,&#32;sIdxPtr,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cRLength,&#32;cILength,&#32;sVLength,&#32;sILength,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;topN,&#32;tolerance,&#32;normalize,&#32;useGaussianTol,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;verbose);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00242"/>00242 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Marshal.Copy(result,&#32;resultArray,&#32;0,&#32;sILength&#32;*&#32;topN);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00244"/>00244 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memStat&#32;=&#32;releaseMemoryCuda(result);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!useSparse)
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;result&#32;=&#32;findTopCandidatesCudaBatched2(csrRowoffsetsPtr,&#32;csrIdxPtr,&#32;sValuesPtr,&#32;sIdxPtr,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cRLength,&#32;cILength,&#32;sVLength,&#32;sILength,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;topN,&#32;tolerance,&#32;normalize,&#32;useGaussianTol,&#32;batchSize,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;verbose);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00255"/>00255 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Marshal.Copy(result,&#32;resultArray,&#32;0,&#32;sILength&#32;*&#32;topN);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00257"/>00257 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memStat&#32;=&#32;releaseMemoryCuda(result);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00262"/>00262 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00263"/>00263 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IntPtr&#32;result&#32;=&#32;findTopCandidatesCudaBatched(csrRowoffsetsPtr,&#32;csrIdxPtr,&#32;sValuesPtr,&#32;sIdxPtr,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cRLength,&#32;cILength,&#32;sVLength,&#32;sILength,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;topN,&#32;tolerance,&#32;normalize,&#32;useGaussianTol,&#32;batchSize,
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;verbose);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00268"/>00268 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Marshal.Copy(result,&#32;resultArray,&#32;0,&#32;sILength&#32;*&#32;topN);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00270"/>00270 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memStat&#32;=&#32;releaseMemoryCuda(result);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(Exception&#32;ex)
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine(<emphasis role="stringliteral">&quot;Something&#32;went&#32;wrong:&quot;</emphasis>);
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Console.WriteLine(ex.ToString());
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memStat&#32;=&#32;1;
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">finally</emphasis>
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(csrRowoffsetsLoc.IsAllocated)&#32;{&#32;csrRowoffsetsLoc.Free();&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(csrIdxLoc.IsAllocated)&#32;{&#32;csrIdxLoc.Free();&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sValuesLoc.IsAllocated)&#32;{&#32;sValuesLoc.Free();&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sIdxLoc.IsAllocated)&#32;{&#32;sIdxLoc.Free();&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00288"/>00288 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;resultArray;
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00291"/>00291 
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00292"/>00292 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00293"/>00293 &#32;&#32;&#32;&#32;}
<anchor xml:id="__vector_search_a_p_i_8cs_source_1l00294"/>00294 }
</programlisting></section>
