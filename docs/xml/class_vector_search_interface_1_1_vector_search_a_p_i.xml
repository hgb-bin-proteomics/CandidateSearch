<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="class_vector_search_interface_1_1_vector_search_a_p_i" kind="class" language="C#" prot="public">
    <compoundname>VectorSearchInterface::VectorSearchAPI</compoundname>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_vector_search_interface_1_1_vector_search_a_p_i_1a6e00454923077f5eb26360ac93332241" prot="private" static="yes" mutable="no">
        <type>const string</type>
        <definition>const string VectorSearchInterface.VectorSearchAPI.dllCPU</definition>
        <argsstring></argsstring>
        <name>dllCPU</name>
        <qualifiedname>VectorSearchInterface.VectorSearchAPI.dllCPU</qualifiedname>
        <initializer>= @&quot;VectorSearch.dll&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dll/VectorSearchAPI.cs" line="7" column="22" bodyfile="dll/VectorSearchAPI.cs" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_vector_search_interface_1_1_vector_search_a_p_i_1abadc76167a1309bf5ee77916f174bbdd" prot="private" static="yes" mutable="no">
        <type>const string</type>
        <definition>const string VectorSearchInterface.VectorSearchAPI.dllGPU</definition>
        <argsstring></argsstring>
        <name>dllGPU</name>
        <qualifiedname>VectorSearchInterface.VectorSearchAPI.dllGPU</qualifiedname>
        <initializer>= @&quot;VectorSearchCUDA.dll&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dll/VectorSearchAPI.cs" line="8" column="22" bodyfile="dll/VectorSearchAPI.cs" bodystart="8" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_vector_search_interface_1_1_vector_search_a_p_i_1a30977c3ab923e9975a2323326e8d21e3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IntPtr</type>
        <definition>static IntPtr VectorSearchInterface.VectorSearchAPI.findTopCandidates</definition>
        <argsstring>(IntPtr cV, IntPtr cI, IntPtr sV, IntPtr sI, int cVL, int cIL, int sVL, int sIL, int n, float tolerance, bool normalize, bool gaussianTol, int cores, int verbose)</argsstring>
        <name>findTopCandidates</name>
        <qualifiedname>VectorSearchInterface.VectorSearchAPI.findTopCandidates</qualifiedname>
        <param>
          <type>IntPtr</type>
          <declname>cV</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>cI</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>sV</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>sI</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cVL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cIL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sVL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sIL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>gaussianTol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cores</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dll/VectorSearchAPI.cs" line="13" column="38"/>
      </memberdef>
      <memberdef kind="function" id="class_vector_search_interface_1_1_vector_search_a_p_i_1ac5baf7499fa021537230c13e3634c8be" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IntPtr</type>
        <definition>static IntPtr VectorSearchInterface.VectorSearchAPI.findTopCandidatesBatched</definition>
        <argsstring>(IntPtr cV, IntPtr cI, IntPtr sV, IntPtr sI, int cVL, int cIL, int sVL, int sIL, int n, float tolerance, bool normalize, bool gaussianTol, int batchSize, int cores, int verbose)</argsstring>
        <name>findTopCandidatesBatched</name>
        <qualifiedname>VectorSearchInterface.VectorSearchAPI.findTopCandidatesBatched</qualifiedname>
        <param>
          <type>IntPtr</type>
          <declname>cV</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>cI</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>sV</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>sI</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cVL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cIL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sVL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sIL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>gaussianTol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>batchSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cores</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dll/VectorSearchAPI.cs" line="20" column="38"/>
      </memberdef>
      <memberdef kind="function" id="class_vector_search_interface_1_1_vector_search_a_p_i_1aa6855c79bc3a8d2beb2feea703c9813a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IntPtr</type>
        <definition>static IntPtr VectorSearchInterface.VectorSearchAPI.findTopCandidates2</definition>
        <argsstring>(IntPtr cV, IntPtr cI, IntPtr sV, IntPtr sI, int cVL, int cIL, int sVL, int sIL, int n, float tolerance, bool normalize, bool gaussianTol, int cores, int verbose)</argsstring>
        <name>findTopCandidates2</name>
        <qualifiedname>VectorSearchInterface.VectorSearchAPI.findTopCandidates2</qualifiedname>
        <param>
          <type>IntPtr</type>
          <declname>cV</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>cI</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>sV</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>sI</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cVL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cIL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sVL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sIL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>gaussianTol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cores</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dll/VectorSearchAPI.cs" line="28" column="38"/>
      </memberdef>
      <memberdef kind="function" id="class_vector_search_interface_1_1_vector_search_a_p_i_1a0aaaeb479c34425b89d7d5a1876633ab" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IntPtr</type>
        <definition>static IntPtr VectorSearchInterface.VectorSearchAPI.findTopCandidatesBatched2</definition>
        <argsstring>(IntPtr cV, IntPtr cI, IntPtr sV, IntPtr sI, int cVL, int cIL, int sVL, int sIL, int n, float tolerance, bool normalize, bool gaussianTol, int batchSize, int cores, int verbose)</argsstring>
        <name>findTopCandidatesBatched2</name>
        <qualifiedname>VectorSearchInterface.VectorSearchAPI.findTopCandidatesBatched2</qualifiedname>
        <param>
          <type>IntPtr</type>
          <declname>cV</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>cI</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>sV</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>sI</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cVL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cIL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sVL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sIL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>gaussianTol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>batchSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cores</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dll/VectorSearchAPI.cs" line="35" column="38"/>
      </memberdef>
      <memberdef kind="function" id="class_vector_search_interface_1_1_vector_search_a_p_i_1a174ef2bc90fa4f95f18a678cf8fcf2c9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int VectorSearchInterface.VectorSearchAPI.releaseMemory</definition>
        <argsstring>(IntPtr result)</argsstring>
        <name>releaseMemory</name>
        <qualifiedname>VectorSearchInterface.VectorSearchAPI.releaseMemory</qualifiedname>
        <param>
          <type>IntPtr</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dll/VectorSearchAPI.cs" line="43" column="35"/>
      </memberdef>
      <memberdef kind="function" id="class_vector_search_interface_1_1_vector_search_a_p_i_1a80fd0220d91ef167d622e7d90a0086a3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IntPtr</type>
        <definition>static IntPtr VectorSearchInterface.VectorSearchAPI.findTopCandidatesCuda</definition>
        <argsstring>(IntPtr cR, IntPtr cI, IntPtr sV, IntPtr sI, int cRL, int cNNZ, int sVL, int sIL, int n, float tolerance, bool normalize, bool gaussianTol, int verbose)</argsstring>
        <name>findTopCandidatesCuda</name>
        <qualifiedname>VectorSearchInterface.VectorSearchAPI.findTopCandidatesCuda</qualifiedname>
        <param>
          <type>IntPtr</type>
          <declname>cR</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>cI</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>sV</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>sI</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cRL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cNNZ</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sVL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sIL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>gaussianTol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dll/VectorSearchAPI.cs" line="50" column="38"/>
      </memberdef>
      <memberdef kind="function" id="class_vector_search_interface_1_1_vector_search_a_p_i_1aa0676168a6ad16847f474c43eebc5e24" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IntPtr</type>
        <definition>static IntPtr VectorSearchInterface.VectorSearchAPI.findTopCandidatesCudaBatched</definition>
        <argsstring>(IntPtr cR, IntPtr cI, IntPtr sV, IntPtr sI, int cRL, int cNNZ, int sVL, int sIL, int n, float tolerance, bool normalize, bool gaussianTol, int batchSize, int verbose)</argsstring>
        <name>findTopCandidatesCudaBatched</name>
        <qualifiedname>VectorSearchInterface.VectorSearchAPI.findTopCandidatesCudaBatched</qualifiedname>
        <param>
          <type>IntPtr</type>
          <declname>cR</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>cI</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>sV</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>sI</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cRL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cNNZ</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sVL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sIL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>gaussianTol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>batchSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dll/VectorSearchAPI.cs" line="57" column="38"/>
      </memberdef>
      <memberdef kind="function" id="class_vector_search_interface_1_1_vector_search_a_p_i_1afcfbf91916d685042bb9732da3f1dd45" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IntPtr</type>
        <definition>static IntPtr VectorSearchInterface.VectorSearchAPI.findTopCandidatesCudaBatched2</definition>
        <argsstring>(IntPtr cR, IntPtr cI, IntPtr sV, IntPtr sI, int cRL, int cNNZ, int sVL, int sIL, int n, float tolerance, bool normalize, bool gaussianTol, int batchSize, int verbose)</argsstring>
        <name>findTopCandidatesCudaBatched2</name>
        <qualifiedname>VectorSearchInterface.VectorSearchAPI.findTopCandidatesCudaBatched2</qualifiedname>
        <param>
          <type>IntPtr</type>
          <declname>cR</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>cI</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>sV</declname>
        </param>
        <param>
          <type>IntPtr</type>
          <declname>sI</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cRL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cNNZ</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sVL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sIL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>gaussianTol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>batchSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dll/VectorSearchAPI.cs" line="65" column="38"/>
      </memberdef>
      <memberdef kind="function" id="class_vector_search_interface_1_1_vector_search_a_p_i_1a1360cffb84350bb0edeff9e61ceb6fec" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int VectorSearchInterface.VectorSearchAPI.releaseMemoryCuda</definition>
        <argsstring>(IntPtr result)</argsstring>
        <name>releaseMemoryCuda</name>
        <qualifiedname>VectorSearchInterface.VectorSearchAPI.releaseMemoryCuda</qualifiedname>
        <param>
          <type>IntPtr</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dll/VectorSearchAPI.cs" line="73" column="35"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_vector_search_interface_1_1_vector_search_a_p_i_1a590ce87e625ca1e73c5cd4dfdc4c5a19" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int[]</type>
        <definition>static int[] VectorSearchInterface.VectorSearchAPI.searchCPU</definition>
        <argsstring>(ref int[] candidatesValues, ref int[] candidatesIdx, ref int[] spectraValues, ref int[] spectraIdx, int topN, float tolerance, bool normalize, bool useGaussianTol, bool batched, int batchSize, bool useSparse, int cores, int verbose, out int memStat)</argsstring>
        <name>searchCPU</name>
        <qualifiedname>VectorSearchInterface.VectorSearchAPI.searchCPU</qualifiedname>
        <param>
          <type>ref int[]</type>
          <declname>candidatesValues</declname>
        </param>
        <param>
          <type>ref int[]</type>
          <declname>candidatesIdx</declname>
        </param>
        <param>
          <type>ref int[]</type>
          <declname>spectraValues</declname>
        </param>
        <param>
          <type>ref int[]</type>
          <declname>spectraIdx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>topN</declname>
        </param>
        <param>
          <type>float</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useGaussianTol</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>batched</declname>
        </param>
        <param>
          <type>int</type>
          <declname>batchSize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useSparse</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cores</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbose</declname>
        </param>
        <param>
          <type>out int</type>
          <declname>memStat</declname>
        </param>
        <briefdescription>
<para>Calculates the top n candidates for each spectrum on the CPU using Eigen. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>candidatesValues</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer array of theoretical ion m/z values for all candidates flattened.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>candidatesIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer array that contains indices indicating where each candidate starts in candidatesValues.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spectraValues</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer array of peak m/z values from experimental spectra flattened.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spectraIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer array that contains indices indicating where each spectrum starts in spectraValues.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>topN</parametername>
</parameternamelist>
<parameterdescription>
<para>The number (int) of top candidates that should be returned for each spectrum.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance used for matching peaks in Dalton (float).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>normalize</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not the candidate scores should be normalized by candidate length (bool).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useGaussianTol</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not experimental peaks should be modelled as gaussian normal distributions (bool).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>batched</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether a batched approach (MM) or not (MV) should be used (bool).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>batchSize</parametername>
</parameternamelist>
<parameterdescription>
<para>If a batched approach is used, how big should batches be (integer).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useSparse</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether a sparse approach (SPMV/SPMM) or not (GEMV/GEMM) should be used (bool).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cores</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of CPU cores that should be used for computation (int).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbose</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer parameter controlling how often progress should be printed to std::out. If 0 no progress will be printed.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memStat</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer out parameter indicating if memory was successfully freed after execution, 0 = success, 1 = error.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer array with length (number of spectra * topN) containing the indices of the top n candidates for every spectrum.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dll/VectorSearchAPI.cs" line="97" column="27" bodyfile="dll/VectorSearchAPI.cs" bodystart="97" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="class_vector_search_interface_1_1_vector_search_a_p_i_1a0f85ff8875e0abb9b00dd5ca4d170aaf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int[]</type>
        <definition>static int[] VectorSearchInterface.VectorSearchAPI.searchGPU</definition>
        <argsstring>(ref int[] csrRowoffsets, ref int[] csrColIdx, ref int[] spectraValues, ref int[] spectraIdx, int topN, float tolerance, bool normalize, bool useGaussianTol, bool batched, int batchSize, bool useSparse, int verbose, out int memStat)</argsstring>
        <name>searchGPU</name>
        <qualifiedname>VectorSearchInterface.VectorSearchAPI.searchGPU</qualifiedname>
        <param>
          <type>ref int[]</type>
          <declname>csrRowoffsets</declname>
        </param>
        <param>
          <type>ref int[]</type>
          <declname>csrColIdx</declname>
        </param>
        <param>
          <type>ref int[]</type>
          <declname>spectraValues</declname>
        </param>
        <param>
          <type>ref int[]</type>
          <declname>spectraIdx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>topN</declname>
        </param>
        <param>
          <type>float</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useGaussianTol</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>batched</declname>
        </param>
        <param>
          <type>int</type>
          <declname>batchSize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useSparse</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbose</declname>
        </param>
        <param>
          <type>out int</type>
          <declname>memStat</declname>
        </param>
        <briefdescription>
<para>Calculates the top n candidates for each spectrum on the (Nvidia) GPU using CUDA. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>csrRowoffsets</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer array of rowoffsets of the CSR sparse matrix with length (rows + 1 = number of candidates + 1).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>csrColIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer array of column indices of the CSR sparse matrix with length (NNZ = total number of theoretical ions).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spectraValues</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer array of peak m/z values from experimental spectra flattened.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spectraIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer array that contains indices indicating where each spectrum starts in spectraValues.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>topN</parametername>
</parameternamelist>
<parameterdescription>
<para>The number (int) of top candidates that should be returned for each spectrum.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance used for matching peaks in Dalton (float).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>normalize</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not the candidate scores should be normalized by candidate length (bool).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useGaussianTol</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not experimental peaks should be modelled as gaussian normal distributions (bool).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>batched</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether a batched approach (MM) or not (MV) should be used (bool).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>batchSize</parametername>
</parameternamelist>
<parameterdescription>
<para>If a batched approach is used, how big should batches be (integer).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useSparse</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether a sparse approach (SPMV/SPMM) or not (GEMV/GEMM) should be used (bool).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbose</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer parameter controlling how often progress should be printed to std::out. If 0 no progress will be printed.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memStat</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer out parameter indicating if memory was successfully freed after execution, 0 = success, 1 = error.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer array with length (number of spectra * topN) containing the indices of the top n candidates for every spectrum.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dll/VectorSearchAPI.cs" line="210" column="27" bodyfile="dll/VectorSearchAPI.cs" bodystart="210" bodyend="290"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="dll/VectorSearchAPI.cs" line="5" column="11" bodyfile="dll/VectorSearchAPI.cs" bodystart="6" bodyend="293"/>
    <listofallmembers>
      <member refid="class_vector_search_interface_1_1_vector_search_a_p_i_1a6e00454923077f5eb26360ac93332241" prot="private" virt="non-virtual"><scope>VectorSearchInterface::VectorSearchAPI</scope><name>dllCPU</name></member>
      <member refid="class_vector_search_interface_1_1_vector_search_a_p_i_1abadc76167a1309bf5ee77916f174bbdd" prot="private" virt="non-virtual"><scope>VectorSearchInterface::VectorSearchAPI</scope><name>dllGPU</name></member>
      <member refid="class_vector_search_interface_1_1_vector_search_a_p_i_1a30977c3ab923e9975a2323326e8d21e3" prot="private" virt="non-virtual"><scope>VectorSearchInterface::VectorSearchAPI</scope><name>findTopCandidates</name></member>
      <member refid="class_vector_search_interface_1_1_vector_search_a_p_i_1aa6855c79bc3a8d2beb2feea703c9813a" prot="private" virt="non-virtual"><scope>VectorSearchInterface::VectorSearchAPI</scope><name>findTopCandidates2</name></member>
      <member refid="class_vector_search_interface_1_1_vector_search_a_p_i_1ac5baf7499fa021537230c13e3634c8be" prot="private" virt="non-virtual"><scope>VectorSearchInterface::VectorSearchAPI</scope><name>findTopCandidatesBatched</name></member>
      <member refid="class_vector_search_interface_1_1_vector_search_a_p_i_1a0aaaeb479c34425b89d7d5a1876633ab" prot="private" virt="non-virtual"><scope>VectorSearchInterface::VectorSearchAPI</scope><name>findTopCandidatesBatched2</name></member>
      <member refid="class_vector_search_interface_1_1_vector_search_a_p_i_1a80fd0220d91ef167d622e7d90a0086a3" prot="private" virt="non-virtual"><scope>VectorSearchInterface::VectorSearchAPI</scope><name>findTopCandidatesCuda</name></member>
      <member refid="class_vector_search_interface_1_1_vector_search_a_p_i_1aa0676168a6ad16847f474c43eebc5e24" prot="private" virt="non-virtual"><scope>VectorSearchInterface::VectorSearchAPI</scope><name>findTopCandidatesCudaBatched</name></member>
      <member refid="class_vector_search_interface_1_1_vector_search_a_p_i_1afcfbf91916d685042bb9732da3f1dd45" prot="private" virt="non-virtual"><scope>VectorSearchInterface::VectorSearchAPI</scope><name>findTopCandidatesCudaBatched2</name></member>
      <member refid="class_vector_search_interface_1_1_vector_search_a_p_i_1a174ef2bc90fa4f95f18a678cf8fcf2c9" prot="private" virt="non-virtual"><scope>VectorSearchInterface::VectorSearchAPI</scope><name>releaseMemory</name></member>
      <member refid="class_vector_search_interface_1_1_vector_search_a_p_i_1a1360cffb84350bb0edeff9e61ceb6fec" prot="private" virt="non-virtual"><scope>VectorSearchInterface::VectorSearchAPI</scope><name>releaseMemoryCuda</name></member>
      <member refid="class_vector_search_interface_1_1_vector_search_a_p_i_1a590ce87e625ca1e73c5cd4dfdc4c5a19" prot="public" virt="non-virtual"><scope>VectorSearchInterface::VectorSearchAPI</scope><name>searchCPU</name></member>
      <member refid="class_vector_search_interface_1_1_vector_search_a_p_i_1a0f85ff8875e0abb9b00dd5ca4d170aaf" prot="public" virt="non-virtual"><scope>VectorSearchInterface::VectorSearchAPI</scope><name>searchGPU</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
