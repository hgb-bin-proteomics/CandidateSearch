<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="md__r_e_a_d_m_e" kind="page">
    <compoundname>md__r_e_a_d_m_e</compoundname>
    <title>CandidateSearch</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md__r_e_a_d_m_e_1autotoc_md0"/> Proof-of-concept implementation of a search engine that uses <ulink url="https://github.com/hgb-bin-proteomics/CandidateVectorSearch">CandidateVectorSearch</ulink> to identify the best peptide candidates for a given mass spectrum. <emphasis><ref refid="namespace_candidate_search" kindref="compound">CandidateSearch</ref></emphasis> creates the vector encodings of peptides and spectra that are needed for the sparse matrix search of <emphasis>CandidateVectorSearch</emphasis>.</para>
<para><emphasis><ref refid="namespace_candidate_search" kindref="compound">CandidateSearch</ref></emphasis> can identify peptide candidates from a given mass spectrum without any precursor ion/mass information and no previous knowledge about potential fixed or variable modifications. <emphasis><ref refid="namespace_candidate_search" kindref="compound">CandidateSearch</ref></emphasis> can also identify peptidoform candidates if a set of fixed and variable modifications is provided. The aim of <emphasis><ref refid="namespace_candidate_search" kindref="compound">CandidateSearch</ref></emphasis> is to reduce the search space for a given identification task by filtering out unlikely peptide or peptidoform candidates. It is <bold>NOT</bold> meant to be a standalone search engine for peptide/peptidoform identification.</para>
<para>A simplified break down of the <emphasis><ref refid="namespace_candidate_search" kindref="compound">CandidateSearch</ref></emphasis> algorithm is given in the following:<itemizedlist>
<listitem><para>Read the given MS2 spectra from the mgf file.</para>
</listitem><listitem><para>Generate the encoding vectors for each spectrum.</para>
</listitem><listitem><para>Transform spectrum encoding vectors into the representation needed for <emphasis>CandidateVectorSearch</emphasis>.</para>
</listitem><listitem><para>Read the given fasta file.</para>
</listitem><listitem><para>Digest the proteins of the fasta file into peptides.</para>
</listitem><listitem><para>[Optional] Generate decoy peptides and peptidoforms.</para>
</listitem><listitem><para>Calculate theoretical ion m/z values for all peptides.</para>
</listitem><listitem><para>Generate the encoding vectors for each peptide.</para>
</listitem><listitem><para>Transform the peptide encoding vectors into the representation needed for <emphasis>CandidateVectorSearch</emphasis>.</para>
</listitem><listitem><para>Run <emphasis>CandidateVectorSearch</emphasis>.</para>
</listitem><listitem><para>Process the results of <emphasis>CandidateVectorSearch</emphasis>.</para>
</listitem><listitem><para>Create a csv file that maps every spectrum (scan number) to a list of the best <emphasis>n</emphasis> peptide candidates.</para>
</listitem><listitem><para>Done!</para>
</listitem></itemizedlist>
</para>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md1">
<title>Usage</title>
<para>Running <emphasis><ref refid="namespace_candidate_search" kindref="compound">CandidateSearch</ref></emphasis> requires three files:<itemizedlist>
<listitem><para>An mgf file containing MS2 spectra.</para>
</listitem><listitem><para>A fasta file containing sample proteins.</para>
</listitem><listitem><para>A settings file containing parameters for digestion, ion calculation and search (see below for an explanation of the settings file).</para>
</listitem></itemizedlist>
</para>
<para>The <emphasis><ref refid="namespace_candidate_search" kindref="compound">CandidateSearch</ref></emphasis> executable can then be run like this:</para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">CandidateSearch.exe<sp/>spectra.mgf<sp/>database.fasta<sp/>settings.txt</highlight></codeline>
</programlisting></para>
<para>Example files that can be used to test <emphasis><ref refid="namespace_candidate_search" kindref="compound">CandidateSearch</ref></emphasis> can be found in <computeroutput>/data</computeroutput>.</para>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md2">
<title>Settings</title>
<para>The settings file accepts the following parameters:<itemizedlist>
<listitem><para>MAX_CLEAVAGES: The maximum number of allowed missed cleavages during digestion. (integer, default = 2)</para>
</listitem><listitem><para>MIN_PEP_LENGTH: The minimum length of a peptide to be considered for search. (integer, default = 5)</para>
</listitem><listitem><para>MAX_PEP_LENGTH: The maximum length of a peptide to be considered for search. (integer, default = 30)</para>
</listitem><listitem><para>MAX_PRECURSOR_CHARGE: The maximum considered precursor ion charge. (integer, default = 4)</para>
</listitem><listitem><para>MAX_FRAGMENT_CHARGE: The maximum considered fragment ion charge. (string, default = +1)</para>
</listitem><listitem><para>MAX_NEUTRAL_LOSSES: The maximum number of neutral losses considered during ion calculation. (integer, default = 1)</para>
</listitem><listitem><para>MAX_NEUTRAL_LOSS_MODS: The maximum number of neutral loss modifications considered during ion calculation. (integer, default = 2)</para>
</listitem><listitem><para>FIXED_MODIFICATIONS: Fixed modifications that should be considered during search given as <computeroutput>(char)amino_acid:(double)modification_mass</computeroutput>. An example would be carbamidomethylation of cysteine, which would be denoted as <computeroutput>C:57.021464;</computeroutput>. Several fixed modifications can be provided. (string, default = None)</para>
</listitem><listitem><para>VARIABLE_MODIFICATIONS: Variable modifications that should be considered during search given as <computeroutput>(char)amino_acid:(double)modification_mass</computeroutput>. An example would be oxidation of methionine, which would be denoted as <computeroutput>M:15.994915;</computeroutput>. Several variable modifications can be provided. If no modifications are given, <emphasis><ref refid="namespace_candidate_search" kindref="compound">CandidateSearch</ref></emphasis> will return the best scoring unmodified peptidoforms for a given spectrum. (string, default = None)</para>
</listitem><listitem><para>DECOY_SEARCH: Whether decoy search should be performed or not. Accepts <computeroutput>true</computeroutput> or <computeroutput>false</computeroutput>. (bool, default = true)</para>
</listitem><listitem><para>TOP_N: The number of best candidates that should be returned by the search. (integer, default = 1000)</para>
</listitem><listitem><para>TOLERANCE: Tolerance used for matching theoretical ions to experimental peaks. Given in Dalton. (double, default = 0.02)</para>
</listitem><listitem><para>NORMALIZE: Whether or not <emphasis>CandidateVectorSearch</emphasis> scores should be normalized before selecting the best <emphasis>n</emphasis> candidates. Accepts <computeroutput>true</computeroutput> or <computeroutput>false</computeroutput>. (bool, default = false)</para>
</listitem><listitem><para>USE_GAUSSIAN: Whether or not experimental peaks should be modelled as gaussian distributions with <computeroutput>mu = (m/z)</computeroutput> and <computeroutput>sigma = (tolerance/3)</computeroutput>. Accepts <computeroutput>true</computeroutput> or <computeroutput>false</computeroutput>. (bool, default = true) <linebreak/>
</para>
</listitem><listitem><para>MODE: Search approach used by <emphasis>CandidateVectorSearch</emphasis>. One of the following (default = CPU_DV):<itemizedlist>
<listitem><para>CPU_DV: Sparse matrix - dense vector search on the CPU.</para>
</listitem><listitem><para>CPU_DM: Sparse matrix - dense matrix search on the CPU.</para>
</listitem><listitem><para>CPU_SV: Sparse matrix - sparse vector search on the CPU.</para>
</listitem><listitem><para>CPU_SM: Sparse matrix - sparse matrix search on the CPU.</para>
</listitem><listitem><para>GPU_DV: Sparse matrix - dense vector search on the GPU (see <ulink url="https://github.com/hgb-bin-proteomics/CandidateVectorSearch/blob/master/README.md">requirements</ulink>).</para>
</listitem><listitem><para>GPU_DM: Sparse matrix - dense matrix search on the GPU (see <ulink url="https://github.com/hgb-bin-proteomics/CandidateVectorSearch/blob/master/README.md">requirements</ulink>).</para>
</listitem><listitem><para>GPU_SM: Sparse matrix - sparse matrix search on the GPU (see <ulink url="https://github.com/hgb-bin-proteomics/CandidateVectorSearch/blob/master/README.md">requirements</ulink>).</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para>For the last five parameters you might additionally want to check the documentation of <ulink url="https://github.com/hgb-bin-proteomics/CandidateVectorSearch">CandidateVectorSearch</ulink> to get a better understanding of their meaning.</para>
<para>An empty <computeroutput>settings.txt</computeroutput> file is a valid configuration for search (default parameters will be used), however not providing a settings file at all is not valid.</para>
<para>An example <computeroutput>settings.txt</computeroutput> file is provided <ulink url="https://github.com/hgb-bin-proteomics/CandidateSearch/blob/master/settings.txt">here</ulink>.</para>
<para>Additionally its contents are listed below, which should help in understanding the formatting:</para>
<para><programlisting><codeline><highlight class="normal">##<sp/>DIGESTIONS<sp/>PARAMETERS</highlight></codeline>
<codeline><highlight class="normal">MAX_CLEAVAGES<sp/>=<sp/>2</highlight></codeline>
<codeline><highlight class="normal">MIN_PEP_LENGTH<sp/>=<sp/>5</highlight></codeline>
<codeline><highlight class="normal">MAX_PEP_LENGTH<sp/>=<sp/>30</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>ION<sp/>CALCULATION<sp/>PARAMETERS</highlight></codeline>
<codeline><highlight class="normal">MAX_PRECURSOR_CHARGE<sp/>=<sp/>4</highlight></codeline>
<codeline><highlight class="normal">MAX_FRAGMENT_CHARGE<sp/>=<sp/>+1</highlight></codeline>
<codeline><highlight class="normal">MAX_NEUTRAL_LOSSES<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal">MAX_NEUTRAL_LOSS_MODS<sp/>=<sp/>2</highlight></codeline>
<codeline><highlight class="normal">#FIXED_MODIFICATIONS<sp/>=<sp/>None</highlight></codeline>
<codeline><highlight class="normal">FIXED_MODIFICATIONS<sp/>=<sp/>C:57.021464;</highlight></codeline>
<codeline><highlight class="normal">#VARIABLE_MODIFICATIONS<sp/>=<sp/>None</highlight></codeline>
<codeline><highlight class="normal">VARIABLE_MODIFICATIONS<sp/>=<sp/>M:15.994915;</highlight></codeline>
<codeline><highlight class="normal">#VARIABLE_MODIFICATIONS<sp/>=<sp/>M:15.994915;K:284.173607;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>SEARCH<sp/>PARAMETERS</highlight></codeline>
<codeline><highlight class="normal">DECOY_SEARCH<sp/>=<sp/>true</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>VECTOR<sp/>SEARCH<sp/>PARAMETERS</highlight></codeline>
<codeline><highlight class="normal">TOP_N<sp/>=<sp/>1000</highlight></codeline>
<codeline><highlight class="normal">TOLERANCE<sp/>=<sp/>0.02</highlight></codeline>
<codeline><highlight class="normal">NORMALIZE<sp/>=<sp/>false</highlight></codeline>
<codeline><highlight class="normal">USE_GAUSSIAN<sp/>=<sp/>true</highlight></codeline>
<codeline><highlight class="normal">MODE<sp/>=<sp/>CPU_DV</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md3">
<title>Documentation</title>
<para>The code of this search engine is fully documented within the <computeroutput>.cs</computeroutput> code files. A good entry point is the main function of <emphasis><ref refid="namespace_candidate_search" kindref="compound">CandidateSearch</ref></emphasis> which is implemented <ulink url="https://github.com/hgb-bin-proteomics/CandidateSearch/blob/master/CandidateSearch.cs">here</ulink>. Documentation generated by <ulink url="https://github.com/doxygen/doxygen">Doxygen</ulink> is also available here: <ulink url="https://hgb-bin-proteomics.github.io/CandidateSearch/">https://hgb-bin-proteomics.github.io/CandidateSearch/</ulink></para>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md4">
<title>Limitations</title>
<para>This a proof-of-concept implementation that shows the applicability of our <emphasis>CandidateVectorSearch</emphasis> approach and not a fully fledged search engine, therefore this implementation comes with a few limitations:</para>
<para><itemizedlist>
<listitem><para>We currently only have implemented tryptic digestion.<itemizedlist>
<listitem><para>You can implement your own digestion <ulink url="https://github.com/hgb-bin-proteomics/CandidateSearch/blob/master/amanda/FASTAParser.cs#L17-L22">here</ulink>.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>We currently have not implemented support for N- or C-terminal modifications.</para>
</listitem><listitem><para>We currently have only implemented support for one possible modification per amino acid.</para>
</listitem><listitem><para>We only support spectra in centroid mode (we can&apos;t really do anything with spectra in profile mode).</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md5">
<title>Results</title>
<para>Example results of <emphasis><ref refid="namespace_candidate_search" kindref="compound">CandidateSearch</ref></emphasis> and results analysis are given in <computeroutput>tests</computeroutput>.</para>
<para><image type="html" name="tests/v1.0.0/results.svg" alt="Results on a HeLa dataset" inline="yes"></image>
</para>
<para><bold>Figure 1:</bold> Identifying peptide candidates and peptidoform candidates with <emphasis><ref refid="namespace_candidate_search" kindref="compound">CandidateSearch</ref></emphasis> in a <ulink url="https://www.ebi.ac.uk/pride/archive/projects/PXD007750">HeLa dataset</ulink> using the human swissprot database. The considered ground truth was an <ulink url="https://ms.imp.ac.at/?goto=msamanda">MS Amanda</ulink> search validated with <ulink url="https://github.com/percolator/percolator">Percolator</ulink>. For every high-confidence PSM we checked if the identified peptide/peptidoform was among the top 50/100/500/1000 hits of <emphasis><ref refid="namespace_candidate_search" kindref="compound">CandidateSearch</ref></emphasis>. We reach almost 100% coverage within the first 1000 hits of <emphasis><ref refid="namespace_candidate_search" kindref="compound">CandidateSearch</ref></emphasis> (for reference: the whole database contained ~4 200 000 peptides or ~10 500 000 peptidoforms).</para>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md6">
<title>Known Issues</title>
<para><ulink url="https://github.com/hgb-bin-proteomics/CandidateSearch/issues">List of known issues</ulink></para>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md7">
<title>Citing</title>
<para>If you are using [parts of] <emphasis><ref refid="namespace_candidate_search" kindref="compound">CandidateSearch</ref></emphasis> please cite:</para>
<para><programlisting><codeline><highlight class="normal">MS<sp/>Annika<sp/>3.0<sp/>(publication<sp/>wip)</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md8">
<title>License</title>
<para><itemizedlist>
<listitem><para><ulink url="https://github.com/hgb-bin-proteomics/CandidateSearch/blob/master/LICENSE">MIT</ulink></para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md9">
<title>Contact</title>
<para><ulink url="mailto:micha.birklbauer@fh-hagenberg.at">micha.birklbauer@fh-hagenberg.at</ulink> </para>
</sect1>
    </detaileddescription>
    <location file="README.md"/>
  </compounddef>
</doxygen>
