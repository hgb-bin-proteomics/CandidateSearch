.TH "md__r_e_a_d_m_e" 3 "Version 1.0.0" "CandidateSearch" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__r_e_a_d_m_e \- \fBCandidateSearch\fP 
.PP
 Proof-of-concept implementation of a search engine that uses \fCCandidateVectorSearch\fP to identify the best peptide candidates for a given mass spectrum\&. \fI\fBCandidateSearch\fP\fP creates the vector encodings of peptides and spectra that are needed for the sparse matrix search of \fICandidateVectorSearch\fP\&.
.PP
\fI\fBCandidateSearch\fP\fP can identify peptide candidates from a given mass spectrum without any precursor ion/mass information and no previous knowledge about potential fixed or variable modifications\&. \fI\fBCandidateSearch\fP\fP can also identify peptidoform candidates if a set of fixed and variable modifications is provided\&. The aim of \fI\fBCandidateSearch\fP\fP is to reduce the search space for a given identification task by filtering out unlikely peptide or peptidoform candidates\&. It is \fBNOT\fP meant to be a standalone search engine for peptide/peptidoform identification\&.
.PP
A simplified break down of the \fI\fBCandidateSearch\fP\fP algorithm is given in the following:
.IP "\(bu" 2
Read the given MS2 spectra from the mgf file\&.
.IP "\(bu" 2
Generate the encoding vectors for each spectrum\&.
.IP "\(bu" 2
Transform spectrum encoding vectors into the representation needed for \fICandidateVectorSearch\fP\&.
.IP "\(bu" 2
Read the given fasta file\&.
.IP "\(bu" 2
Digest the proteins of the fasta file into peptides\&.
.IP "\(bu" 2
[Optional] Generate decoy peptides and peptidoforms\&.
.IP "\(bu" 2
Calculate theoretical ion m/z values for all peptides\&.
.IP "\(bu" 2
Generate the encoding vectors for each peptide\&.
.IP "\(bu" 2
Transform the peptide encoding vectors into the representation needed for \fICandidateVectorSearch\fP\&.
.IP "\(bu" 2
Run \fICandidateVectorSearch\fP\&.
.IP "\(bu" 2
Process the results of \fICandidateVectorSearch\fP\&.
.IP "\(bu" 2
Create a csv file that maps every spectrum (scan number) to a list of the best \fIn\fP peptide candidates\&.
.IP "\(bu" 2
Done!
.PP
.SH "Usage"
.PP
Running \fI\fBCandidateSearch\fP\fP requires three files:
.IP "\(bu" 2
An mgf file containing MS2 spectra\&.
.IP "\(bu" 2
A fasta file containing sample proteins\&.
.IP "\(bu" 2
A settings file containing parameters for digestion, ion calculation and search (see below for an explanation of the settings file)\&.
.PP
.PP
The \fI\fBCandidateSearch\fP\fP executable can then be run like this:
.PP
.PP
.nf
CandidateSearch\&.exe spectra\&.mgf database\&.fasta settings\&.txt
.fi
.PP
.PP
Example files that can be used to test \fI\fBCandidateSearch\fP\fP can be found in \fC/data\fP\&.
.SH "Settings"
.PP
The settings file accepts the following parameters:
.IP "\(bu" 2
MAX_CLEAVAGES: The maximum number of allowed missed cleavages during digestion\&. (integer, default = 2)
.IP "\(bu" 2
MIN_PEP_LENGTH: The minimum length of a peptide to be considered for search\&. (integer, default = 5)
.IP "\(bu" 2
MAX_PEP_LENGTH: The maximum length of a peptide to be considered for search\&. (integer, default = 30)
.IP "\(bu" 2
MAX_PRECURSOR_CHARGE: The maximum considered precursor ion charge\&. (integer, default = 4)
.IP "\(bu" 2
MAX_FRAGMENT_CHARGE: The maximum considered fragment ion charge\&. (string, default = +1)
.IP "\(bu" 2
MAX_NEUTRAL_LOSSES: The maximum number of neutral losses considered during ion calculation\&. (integer, default = 1)
.IP "\(bu" 2
MAX_NEUTRAL_LOSS_MODS: The maximum number of neutral loss modifications considered during ion calculation\&. (integer, default = 2)
.IP "\(bu" 2
FIXED_MODIFICATIONS: Fixed modifications that should be considered during search given as \fC(char)amino_acid:(double)modification_mass\fP\&. An example would be carbamidomethylation of cysteine, which would be denoted as \fCC:57\&.021464;\fP\&. Several fixed modifications can be provided\&. (string, default = None)
.IP "\(bu" 2
VARIABLE_MODIFICATIONS: Variable modifications that should be considered during search given as \fC(char)amino_acid:(double)modification_mass\fP\&. An example would be oxidation of methionine, which would be denoted as \fCM:15\&.994915;\fP\&. Several variable modifications can be provided\&. If no modifications are given, \fI\fBCandidateSearch\fP\fP will return the best scoring unmodified peptidoforms for a given spectrum\&. (string, default = None)
.IP "\(bu" 2
DECOY_SEARCH: Whether decoy search should be performed or not\&. Accepts \fCtrue\fP or \fCfalse\fP\&. (bool, default = true)
.IP "\(bu" 2
TOP_N: The number of best candidates that should be returned by the search\&. (integer, default = 1000)
.IP "\(bu" 2
TOLERANCE: Tolerance used for matching theoretical ions to experimental peaks\&. Given in Dalton\&. (double, default = 0\&.02)
.IP "\(bu" 2
NORMALIZE: Whether or not \fICandidateVectorSearch\fP scores should be normalized before selecting the best \fIn\fP candidates\&. Accepts \fCtrue\fP or \fCfalse\fP\&. (bool, default = false)
.IP "\(bu" 2
USE_GAUSSIAN: Whether or not experimental peaks should be modelled as gaussian distributions with \fCmu = (m/z)\fP and \fCsigma = (tolerance/3)\fP\&. Accepts \fCtrue\fP or \fCfalse\fP\&. (bool, default = true) 
.br

.IP "\(bu" 2
MODE: Search approach used by \fICandidateVectorSearch\fP\&. One of the following (default = CPU_DV):
.IP "  \(bu" 4
CPU_DV: Sparse matrix - dense vector search on the CPU\&.
.IP "  \(bu" 4
CPU_DM: Sparse matrix - dense matrix search on the CPU\&.
.IP "  \(bu" 4
CPU_SV: Sparse matrix - sparse vector search on the CPU\&.
.IP "  \(bu" 4
CPU_SM: Sparse matrix - sparse matrix search on the CPU\&.
.IP "  \(bu" 4
GPU_DV: Sparse matrix - dense vector search on the GPU (see \fCrequirements\fP)\&.
.IP "  \(bu" 4
GPU_DM: Sparse matrix - dense matrix search on the GPU (see \fCrequirements\fP)\&.
.IP "  \(bu" 4
GPU_SM: Sparse matrix - sparse matrix search on the GPU (see \fCrequirements\fP)\&.
.PP

.PP
.PP
For the last five parameters you might additionally want to check the documentation of \fCCandidateVectorSearch\fP to get a better understanding of their meaning\&.
.PP
An empty \fCsettings\&.txt\fP file is a valid configuration for search (default parameters will be used), however not providing a settings file at all is not valid\&.
.PP
An example \fCsettings\&.txt\fP file is provided \fChere\fP\&.
.PP
Additionally its contents are listed below, which should help in understanding the formatting:
.PP
.PP
.nf
## DIGESTIONS PARAMETERS
MAX_CLEAVAGES = 2
MIN_PEP_LENGTH = 5
MAX_PEP_LENGTH = 30

## ION CALCULATION PARAMETERS
MAX_PRECURSOR_CHARGE = 4
MAX_FRAGMENT_CHARGE = +1
MAX_NEUTRAL_LOSSES = 1
MAX_NEUTRAL_LOSS_MODS = 2
#FIXED_MODIFICATIONS = None
FIXED_MODIFICATIONS = C:57\&.021464;
#VARIABLE_MODIFICATIONS = None
VARIABLE_MODIFICATIONS = M:15\&.994915;
#VARIABLE_MODIFICATIONS = M:15\&.994915;K:284\&.173607;

## SEARCH PARAMETERS
DECOY_SEARCH = true

## VECTOR SEARCH PARAMETERS
TOP_N = 1000
TOLERANCE = 0\&.02
NORMALIZE = false
USE_GAUSSIAN = true
MODE = CPU_DV
.fi
.PP
.SH "Documentation"
.PP
The code of this search engine is fully documented within the \fC\&.cs\fP code files\&. A good entry point is the main function of \fI\fBCandidateSearch\fP\fP which is implemented \fChere\fP\&. Documentation generated by \fCDoxygen\fP is also available here: \fChttps://hgb-bin-proteomics\&.github\&.io/CandidateSearch/\fP
.SH "Limitations"
.PP
This a proof-of-concept implementation that shows the applicability of our \fICandidateVectorSearch\fP approach and not a fully fledged search engine, therefore this implementation comes with a few limitations:
.PP
.IP "\(bu" 2
We currently only have implemented tryptic digestion\&.
.IP "  \(bu" 4
You can implement your own digestion \fChere\fP\&.
.PP

.IP "\(bu" 2
We currently have not implemented support for N- or C-terminal modifications\&.
.IP "\(bu" 2
We currently have only implemented support for one possible modification per amino acid\&.
.IP "\(bu" 2
We only support spectra in centroid mode (we can't really do anything with spectra in profile mode)\&.
.PP
.SH "Results"
.PP
Example results of \fI\fBCandidateSearch\fP\fP and results analysis are given in \fCtests\fP\&.
.PP
.PP
\fBFigure 1:\fP Identifying peptide candidates and peptidoform candidates with \fI\fBCandidateSearch\fP\fP in a \fCHeLa dataset\fP using the human swissprot database\&. The considered ground truth was an \fCMS Amanda\fP search validated with \fCPercolator\fP\&. For every high-confidence PSM we checked if the identified peptide/peptidoform was among the top 50/100/500/1000 hits of \fI\fBCandidateSearch\fP\fP\&. We reach almost 100% coverage within the first 1000 hits of \fI\fBCandidateSearch\fP\fP (for reference: the whole database contained ~4 200 000 peptides or ~10 500 000 peptidoforms)\&.
.SH "Known Issues"
.PP
\fCList of known issues\fP
.SH "Citing"
.PP
If you are using [parts of] \fI\fBCandidateSearch\fP\fP please cite:
.PP
.PP
.nf
MS Annika 3\&.0 (publication wip)
.fi
.PP
.SH "License"
.PP
.IP "\(bu" 2
\fCMIT\fP
.PP
.SH "Contact"
.PP
\fCmicha\&.birklbauer@fh-hagenberg\&.at\fP 
