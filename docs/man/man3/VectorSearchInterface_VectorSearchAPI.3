.TH "VectorSearchInterface.VectorSearchAPI" 3 "Version 1.0.0" "CandidateSearch" \" -*- nroff -*-
.ad l
.nh
.SH NAME
VectorSearchInterface.VectorSearchAPI
.SH SYNOPSIS
.br
.PP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static int[] \fBsearchCPU\fP (ref int[] candidatesValues, ref int[] candidatesIdx, ref int[] spectraValues, ref int[] spectraIdx, int topN, float tolerance, bool normalize, bool useGaussianTol, bool batched, int batchSize, bool useSparse, int cores, int verbose, out int memStat)"
.br
.RI "Calculates the top n candidates for each spectrum on the CPU using Eigen\&. "
.ti -1c
.RI "static int[] \fBsearchGPU\fP (ref int[] csrRowoffsets, ref int[] csrColIdx, ref int[] spectraValues, ref int[] spectraIdx, int topN, float tolerance, bool normalize, bool useGaussianTol, bool batched, int batchSize, bool useSparse, int verbose, out int memStat)"
.br
.RI "Calculates the top n candidates for each spectrum on the (Nvidia) GPU using CUDA\&. "
.in -1c
.SH "Detailed Description"
.PP 
Definition at line \fB5\fP of file \fBVectorSearchAPI\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "static int[] VectorSearchInterface\&.VectorSearchAPI\&.searchCPU (ref int[] candidatesValues, ref int[] candidatesIdx, ref int[] spectraValues, ref int[] spectraIdx, int topN, float tolerance, bool normalize, bool useGaussianTol, bool batched, int batchSize, bool useSparse, int cores, int verbose, out int memStat)\fC [static]\fP"

.PP
Calculates the top n candidates for each spectrum on the CPU using Eigen\&. 
.PP
\fBParameters\fP
.RS 4
\fIcandidatesValues\fP An integer array of theoretical ion m/z values for all candidates flattened\&.
.br
\fIcandidatesIdx\fP An integer array that contains indices indicating where each candidate starts in candidatesValues\&.
.br
\fIspectraValues\fP An integer array of peak m/z values from experimental spectra flattened\&.
.br
\fIspectraIdx\fP An integer array that contains indices indicating where each spectrum starts in spectraValues\&.
.br
\fItopN\fP The number (int) of top candidates that should be returned for each spectrum\&.
.br
\fItolerance\fP Tolerance used for matching peaks in Dalton (float)\&.
.br
\fInormalize\fP Whether or not the candidate scores should be normalized by candidate length (bool)\&.
.br
\fIuseGaussianTol\fP Whether or not experimental peaks should be modelled as gaussian normal distributions (bool)\&.
.br
\fIbatched\fP Whether a batched approach (MM) or not (MV) should be used (bool)\&.
.br
\fIbatchSize\fP If a batched approach is used, how big should batches be (integer)\&.
.br
\fIuseSparse\fP Whether a sparse approach (SPMV/SPMM) or not (GEMV/GEMM) should be used (bool)\&.
.br
\fIcores\fP The number of CPU cores that should be used for computation (int)\&.
.br
\fIverbose\fP An integer parameter controlling how often progress should be printed to std::out\&. If 0 no progress will be printed\&.
.br
\fImemStat\fP An integer out parameter indicating if memory was successfully freed after execution, 0 = success, 1 = error\&.
.RE
.PP
\fBReturns\fP
.RS 4
An integer array with length (number of spectra * topN) containing the indices of the top n candidates for every spectrum\&.
.RE
.PP

.PP
Definition at line \fB97\fP of file \fBVectorSearchAPI\&.cs\fP\&.
.SS "static int[] VectorSearchInterface\&.VectorSearchAPI\&.searchGPU (ref int[] csrRowoffsets, ref int[] csrColIdx, ref int[] spectraValues, ref int[] spectraIdx, int topN, float tolerance, bool normalize, bool useGaussianTol, bool batched, int batchSize, bool useSparse, int verbose, out int memStat)\fC [static]\fP"

.PP
Calculates the top n candidates for each spectrum on the (Nvidia) GPU using CUDA\&. 
.PP
\fBParameters\fP
.RS 4
\fIcsrRowoffsets\fP An integer array of rowoffsets of the CSR sparse matrix with length (rows + 1 = number of candidates + 1)\&.
.br
\fIcsrColIdx\fP An integer array of column indices of the CSR sparse matrix with length (NNZ = total number of theoretical ions)\&.
.br
\fIspectraValues\fP An integer array of peak m/z values from experimental spectra flattened\&.
.br
\fIspectraIdx\fP An integer array that contains indices indicating where each spectrum starts in spectraValues\&.
.br
\fItopN\fP The number (int) of top candidates that should be returned for each spectrum\&.
.br
\fItolerance\fP Tolerance used for matching peaks in Dalton (float)\&.
.br
\fInormalize\fP Whether or not the candidate scores should be normalized by candidate length (bool)\&.
.br
\fIuseGaussianTol\fP Whether or not experimental peaks should be modelled as gaussian normal distributions (bool)\&.
.br
\fIbatched\fP Whether a batched approach (MM) or not (MV) should be used (bool)\&.
.br
\fIbatchSize\fP If a batched approach is used, how big should batches be (integer)\&.
.br
\fIuseSparse\fP Whether a sparse approach (SPMV/SPMM) or not (GEMV/GEMM) should be used (bool)\&.
.br
\fIverbose\fP An integer parameter controlling how often progress should be printed to std::out\&. If 0 no progress will be printed\&.
.br
\fImemStat\fP An integer out parameter indicating if memory was successfully freed after execution, 0 = success, 1 = error\&.
.RE
.PP
\fBReturns\fP
.RS 4
An integer array with length (number of spectra * topN) containing the indices of the top n candidates for every spectrum\&.
.RE
.PP

.PP
Definition at line \fB210\fP of file \fBVectorSearchAPI\&.cs\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for CandidateSearch from the source code\&.
